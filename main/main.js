/*
==========================================
 ÏÑ±ÏùºÏ†ïÎ≥¥Í≥† ÎßÅÌÅ¨ ÌóàÎ∏å Ïä§ÌÅ¨Î¶ΩÌä∏
------------------------------------------
 ‚¶ø Ï†úÏûëÏûê : ÏÑ±ÏùºÏ†ïÎ≥¥Í≥†Îì±ÌïôÍµê ÍµêÏú°Ï†ïÎ≥¥Î∂ÄÏû• ÍπÄÌòïÏ§Ä
 ‚¶ø ÏµúÏ¥à ÏûëÏÑ± : 2025-09-15
 ‚¶ø ÏàòÏ†ï ÎÇ¥Ïó≠ : 
    - 2025-09-22 Ïπ¥Îìú Ïà®ÍπÄ/Î≥µÏõê Í∏∞Îä• Ï∂îÍ∞Ä
    - 2025-09-22 Î©îÎ™®Ïû• Î™®Îã¨ CRUD Í∏∞Îä• Íµ¨ÌòÑ
    - 2025-10-15 Ïò§ÎäòÏùºÏ†ï Í∏∞Îä• Íµ¨ÌòÑ
------------------------------------------
 Î≥∏ ÏÜåÏä§Îäî ÏÑ±ÏùºÏ†ïÎ≥¥Í≥† ÎÇ¥Î∂Ä ÏóÖÎ¨¥ ÏßÄÏõêÏö©ÏúºÎ°ú ÏûëÏÑ±ÎêòÏóàÏúºÎ©∞
 Î¨¥Îã® ÏÇ¨Ïö© Î∞è Ïô∏Î∂Ä Î∞∞Ìè¨Î•º Í∏àÌï©ÎãàÎã§.
==========================================
*/

// ÏïàÏ†Ñ selector & Î∞îÏù∏Îî© Ìó¨Ìçº
const $ = (id) => document.getElementById(id);
const on = (el, evt, handler, opts) => {
    if (el) el.addEventListener(evt, handler, opts);
    // else console.warn(`[bind skipped] ${evt} on`, el);
};
// Ïó∞ÎèÑ
document.getElementById('yy').textContent = new Date().getFullYear();

// Í≤ÄÏÉâ & Ïπ¥ÌÖåÍ≥†Î¶¨ ÌïÑÌÑ∞
const q = document.getElementById('q');
const cards = [...document.querySelectorAll('.card')];
const pills = [...document.querySelectorAll('.pill')];
let hiddenCards = JSON.parse(localStorage.getItem("eduinfo.hiddenCards") || "[]");
let activeCat = 'all';

function applyFilter() {
    const keyword = (q.value || '').trim().toLowerCase();
    cards.forEach(c => {
        const key = c.dataset.key; // ‚úÖ Ïó¨Í∏∞ÏÑú key Ï†ïÏùò
        const tags = (c.dataset.tags || '').toLowerCase();
        const inCat = activeCat === 'all' ? true : (c.dataset.cat === activeCat);
        const hit = !keyword || tags.includes(keyword) || c.querySelector('h3').textContent.toLowerCase().includes(keyword);

        // üö® Ïà®ÍπÄ Ïπ¥Îìú Ï≤òÎ¶¨ Ï∂îÍ∞Ä
        const isHidden = hiddenCards.includes(key);

        c.style.display = (!isHidden && inCat && hit) ? '' : 'none';
    });
}

q.addEventListener('input', applyFilter);
pills.forEach(p => {
    p.addEventListener('click', () => {
        activeCat = p.dataset.filter;
        pills.forEach(x => x.style.outline = '');
        p.style.outline = '2px solid var(--accent)';
        applyFilter();
    });
});

applyFilter();


// Í∏∞Î≥∏ ÏÑ†ÌÉù ÌëúÏãú (Î∞∞Ïó¥ Í∏∏Ïù¥ Î≥¥Ïû•Ïö©)
pills[0]?.style && (pills[0].style.outline = '2px solid var(--accent)');

// ===== Ï†ÑÍ¥ëÌåê =====
const track = $('ledTrack');
const ticker = $('ledTicker');
const toggleBtn = $('tickerToggle');

function sep() {
    const s = document.createElement('span');
    s.className = 'led-sep';
    return s;
}
const achievements = [
    "üèÜ 2025ÎÖÑ Ï†ú15Ìöå Ï†ÑÍµ≠ÏÉÅÏóÖÍ≤ΩÏßÑÎåÄÌöå ÎπÑÏ¶àÎãàÏä§ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç ÏùÄÏÉÅ - Ïñë‚óãÏö±",
    "üèÜ 2025ÎÖÑ Ï†ú15Ìöå Ï†ÑÍµ≠ÏÉÅÏóÖÍ≤ΩÏßÑÎåÄÌöå ÏÑ∏Î¨¥Ïã§Î¨¥ ÏùÄÏÉÅ ‚Äî Ïû•‚óãÌò∏",
    "üèÜ 2025ÎÖÑ Ï†ú15Ìöå Ï†ÑÍµ≠ÏÉÅÏóÖÍ≤ΩÏßÑÎåÄÌöå Í∏àÏúµÏã§Î¨¥ ÎèôÏÉÅ - Ïû•‚óãÏö∞",
    "ü´° 2025ÌïôÎÖÑÎèÑ Î∂ÄÏÇ¨Í¥ÄÎ∞ò Ïû¨ÌïôÏÉù Ï†ÑÏõê Ìï©Í≤©(Í≥µÍµ∞24Î™Ö, Ïú°Íµ∞22Î™Ö, Ìï¥Î≥ëÎåÄ2Î™Ö)",
    "üè¢ Î©îÎ¶¨Ï∏†Ï¶ùÍ∂å¬∑ÌïòÎÇòÏùÄÌñâ¬∑ÏÉàÎßàÏùÑÍ∏àÍ≥†¬∑Í∏∞Î≥¥¬∑aT Í≥µÏÇ¨ Îì± Ï∑®ÏóÖ ÏÜåÏãù"
];

function renderTicker() {
    if (!track) return;
    track.innerHTML = "";
    track.appendChild(sep());
    achievements.forEach(msg => {
        const span = document.createElement('span');
        span.textContent = " " + msg + " ";
        track.appendChild(span);
        track.appendChild(sep());
    });
    const chars = achievements.join("  ").length;
    const speed = Math.max(20, Math.min(45, Math.round(chars / 6)));
    track.style.animation = `ledScroll ${speed}s linear infinite`;
}

function openTicker() {
    if (!ticker || !toggleBtn) return;
    ticker.classList.add('is-open');
    ticker.setAttribute('aria-hidden', 'false');
    toggleBtn.textContent = 'üì¢ ÌïôÍµê ÏïåÎ¶º Ï†ÑÍ¥ëÌåê Îã´Í∏∞';
    renderTicker();
}

function closeTicker() {
    if (!ticker || !toggleBtn || !track) return;
    ticker.classList.remove('is-open');
    ticker.setAttribute('aria-hidden', 'true');
    toggleBtn.textContent = 'üì¢ ÌïôÍµê ÏïåÎ¶º Ï†ÑÍ¥ëÌåê Ïó¥Í∏∞';
    track.style.animation = 'none';
}
on(toggleBtn, 'click', () => ticker.classList.contains('is-open') ? closeTicker() : openTicker());
// on(track, 'focus', () => track.style.animationPlayState = 'paused');
on(track, 'blur', () => track.style.animationPlayState = 'running');
on(ticker, 'mouseenter', () => track && (track.style.animationPlayState = 'paused'));
on(ticker, 'mouseleave', () => track && (track.style.animationPlayState = 'running'));

// ===== ÏÉÅÎã® Îπ†Î•∏ Í≤ÄÏÉâÎ∞î (Ï§ëÎ≥µ Î∞©ÏßÄ+ÏóîÌÑ∞ Ìïú Î≤àÎßå) =====
(function () {
    if (window.__qsBound) return;
    window.__qsBound = true;
    const input = $('qsInput'),
        gBtn = $('qsGoogle'),
        nBtn = $('qsNaver');
    const DEFAULT_KEY = 'eduinfo.search.default';
    let defaultEngine = localStorage.getItem(DEFAULT_KEY) || 'google';
    const OPEN_LOCK_MS = 600;
    let lastOpenAt = 0;

    function highlight() {
        if (!gBtn || !nBtn) return;
        gBtn.style.outline = (defaultEngine === 'google') ? '2px solid var(--accent)' : '';
        nBtn.style.outline = (defaultEngine === 'naver') ? '2px solid var(--accent)' : '';
    }

    function openSearch(engine, q) {
        if (!input) return;
        if (!q) {
            input.focus();
            return;
        }
        const now = Date.now();
        if (now - lastOpenAt < OPEN_LOCK_MS) return;
        lastOpenAt = now;
        const enc = encodeURIComponent(q.trim());
        const url = (engine === 'naver') ?
            `https://search.naver.com/search.naver?query=${enc}` :
            `https://www.google.com/search?q=${enc}`;
        window.open(url, '_blank', 'noopener');
        localStorage.setItem(DEFAULT_KEY, engine);
        defaultEngine = engine;
        highlight();

        input.value = "";
    }
    // Í≤ÄÏÉâÏ∞Ω Ï†ÑÏ≤¥ ÌÅ¥Î¶≠ ‚Üí input Ìè¨Ïª§Ïä§
    const qsWrap = document.querySelector('.quick-search');
    const qsInput = document.getElementById('qsInput');

    if (qsWrap && qsInput) {
    qsWrap.addEventListener('click', (e) => {
        // Î≤ÑÌäº ÎàÑÎ•∏ Í±¥ Î¨¥Ïãú
        if (e.target.tagName.toLowerCase() !== 'button') {
        qsInput.focus();
        }
    });
    }

    function smart() {
        if (!input) return;
        const val = (input.value || '').trim();
        if (!val) {
            input.focus();
            return;
        }
        const m = val.match(/^([gnGN„Ñ±„Ñ¥„Öé„Öú])\s+(.*)$/);
        if (m) {
            const k = m[1].toLowerCase();
            const eng = (k === 'g' || k === '„Ñ±' || k === '„Öé') ? 'google' : (k === 'n' || k === '„Ñ¥' || k === '„Öú') ? 'naver' :
                defaultEngine;
            openSearch(eng, m[2]);
        } else openSearch(defaultEngine, val);
    }

    on(input, 'keydown', (e) => {
        if (e.key === 'Enter') {
            if (e.isComposing) return;
            e.preventDefault();
            e.stopPropagation();
            smart();
        }
    }, {
        passive: false
    });
    on(gBtn, 'click', () => openSearch('google', input && input.value));
    on(nBtn, 'click', () => openSearch('naver', input && input.value));
    highlight();
})();

// ===== Ïò§Îäò Í∏âÏãù (NEIS) =====
(function () {
const textEl = $('todayMealText');
if (!textEl) return;

const officeCode = "J10",
schoolCode = "7530591",
key = "86d5824114ac4902a87d57ce9146867d";

const CACHE_KEY = "todayMealCache";

function todayYMD() {
const kst = new Date(new Date().toLocaleString('en-US', { timeZone: 'Asia/Seoul' }));
const y = kst.getFullYear(),
m = String(kst.getMonth() + 1).padStart(2, '0'),
d = String(kst.getDate()).padStart(2, '0');
return `${y}${m}${d}`;
}

function formatMenu(s) {
if (!s) return '';
return s.replace(/<br\s*\/?>/gi, ' ¬∑ ' ) .replace(/\([^)]*\)/g, '' ) .replace(/\b\d+\./g, '' )
    .replace(/\s{2,}/g, ' ' ) .trim(); } async function fetchMeal() { const ymd=todayYMD(); const
    url=`https://open.neis.go.kr/hub/mealServiceDietInfo?KEY=${encodeURIComponent(key)}&Type=json&ATPT_OFCDC_SC_CODE=${officeCode}&SD_SCHUL_CODE=${schoolCode}&MLSV_FROM_YMD=${ymd}&MLSV_TO_YMD=${ymd}`;
    try { const res=await fetch(url); const data=await res.json(); if (data &&
    Array.isArray(data.mealServiceDietInfo)) { const withRow=data.mealServiceDietInfo.find(x=>
    Array.isArray(x.row));
    const rows = withRow ? withRow.row : [];
    if (rows.length) {
    const target = rows.find(r => (r.MMEAL_SC_NM || '').includes('Ï§ëÏãù')) || rows[0];
    const text = formatMenu(target && target.DDISH_NM);
    return text || null;
    }
    }
    } catch (e) {
    console.warn("Í∏âÏãù Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:", e);
    }
    return null;
    }

    async function loadMeal() {
    const today = todayYMD();

    // 1) Ï∫êÏãú Î®ºÏ†Ä ÌôïÏù∏
    const cache = JSON.parse(localStorage.getItem(CACHE_KEY) || "{}");
    if (cache.date === today && cache.text) {
        textEl.textContent = cache.text; // Ï¶âÏãú ÌëúÏãú
        return;
    } else {
        textEl.textContent = "üçö Ïò§ÎäòÏùÄ Ïñ¥Îñ§ Î∞òÏ∞¨Ïù¥ Í∏∞Îã§Î¶¥ÍπåÏöî? Î°úÎî© Ï§ë...";
    }

    // 2) Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú ÏÉàÎ°ú ÏöîÏ≤≠
    const text = await fetchMeal();
    if (text) {
        textEl.textContent = text;
        localStorage.setItem(CACHE_KEY, JSON.stringify({ date: today, text }));
    } else {
        textEl.textContent = "ü•≥ Í∏âÏãùÏùÄ ÏóÜÏßÄÎßå, ÎåÄÏã† Îçî ÎßéÏùÄ ÏûêÏú†Í∞Ä Í∏∞Îã§Î¶ΩÎãàÎã§!";
        localStorage.removeItem(CACHE_KEY);
    }
    }

    loadMeal();
})();

// Accordion ÎèôÏûë
document.querySelectorAll('.accordion-toggle').forEach(btn => {
    btn.addEventListener('click', () => {
        btn.classList.toggle('active');
        const content = btn.nextElementSibling;
        if (btn.classList.contains('active')) {
            content.style.maxHeight = content.scrollHeight + "px";
        } else {
            content.style.maxHeight = null;
        }
    });
});

// ===== Ïã§ÏãúÍ∞Ñ ÏãúÍ≥Ñ(KST) =====
(function () {
    // const $ = (id) => document.getElementById(id);
    const elDate = $('nowDate');
    const elTime = $('nowTime');
    if (!elDate || !elTime) return;

    const DOW = ['Ïùº','Ïõî','Ìôî','Ïàò','Î™©','Í∏à','ÌÜ†'];
    const two = (n) => String(n).padStart(2, '0');

    function nowKST() {
        // Î∏åÎùºÏö∞Ï†Ä ÏßÄÏó≠Í≥º Î¨¥Í¥ÄÌïòÍ≤å ÌïúÍµ≠ÏãúÍ∞Ñ
        return new Date(new Date().toLocaleString('en-US', { timeZone: 'Asia/Seoul' }));
    }

    function render() {
        const d = nowKST();
        const y = d.getFullYear();
        const m = two(d.getMonth() + 1);
        const day = two(d.getDate());
        const w = DOW[d.getDay()];
        const hh = two(d.getHours());
        const mm = two(d.getMinutes());
        const ss = two(d.getSeconds());

        elDate.textContent = `${y}.${m}.${day} (${w})`;
        elTime.textContent = `${hh}:${mm}:${ss}`;
    }

    render();
    // Ï¥à Í≤ΩÍ≥ÑÏóê ÎßûÏ∂∞ Î∂ÄÎìúÎüΩÍ≤å: Îã§Ïùå Ï¥àÍπåÏßÄ ÎßûÏ∂ò Îí§ 1Ï¥à Í∞ÑÍ≤©
    const firstDelay = 1000 - (nowKST().getMilliseconds());
    setTimeout(() => {
        render();
        setInterval(render, 1000);
    }, firstDelay);
})();

// ===== Ïã§ÏãúÍ∞Ñ ÎÇ†Ïî®(Í∏∞ÏÉÅÏ≤≠API) =====
async function fetchWeather(isRetry = false, manualDate = null, manualTime = null) {
    const SERVICE_KEY = "ed175a454d98c792477c333a80a7305d1f49e0ef31e8a3d75110c111023879bd";
    const nx = 62, ny = 124; // ÏÑ±ÎÇ® Ï¢åÌëú

    // ÌòÑÏû¨ ÌïúÍµ≠ ÏãúÍ∞Å
    let kst = new Date(new Date().toLocaleString("en-US", { timeZone: "Asia/Seoul" }));
    let yyyy = kst.getFullYear();
    let mm = String(kst.getMonth() + 1).padStart(2, "0");
    let dd = String(kst.getDate()).padStart(2, "0");
    let base_date = `${yyyy}${mm}${dd}`;

    // ÎÇ¥Ïùº ÎÇ†Ïßú
    const tomorrow = new Date(kst);
    tomorrow.setDate(tomorrow.getDate() + 1);
    const tyyyy = tomorrow.getFullYear();
    const tmm = String(tomorrow.getMonth() + 1).padStart(2, "0");
    const tdd = String(tomorrow.getDate()).padStart(2, "0");
    const tomorrow_date = `${tyyyy}${tmm}${tdd}`;

    // Îã®Í∏∞ÏòàÎ≥¥Îäî 02:00, 05:00, 08:00 ...
    const baseTimes = ["0200","0500","0800","1100","1400","1700","2000","2300"];
    const hh = kst.getHours() * 100 + kst.getMinutes();
    let base_time = baseTimes[0];
    for (let t of baseTimes) {
        if (hh >= parseInt(t)) base_time = t;
    }

    // Î∞úÌëú 40Î∂Ñ Ï†ÑÌõÑ ÏãúÏóêÎäî Ïù¥Ï†Ñ Î∞úÌëúÎ∂ÑÏúºÎ°ú Î≥¥Ï†ï
    if (kst.getMinutes() < 40 && !manualTime) {
        const idx = baseTimes.indexOf(base_time);
        if (idx > 0) {
            base_time = baseTimes[idx - 1];
        } else {
            kst.setDate(kst.getDate() - 1);
            yyyy = kst.getFullYear();
            mm = String(kst.getMonth() + 1).padStart(2, "0");
            dd = String(kst.getDate()).padStart(2, "0");
            base_date = `${yyyy}${mm}${dd}`;
            base_time = "2300";
        }
    }

    // ÏàòÎèô Ïû¨ÏãúÎèÑ Ïãú
    if (manualDate) base_date = manualDate;
    if (manualTime) base_time = manualTime;

    const url =
        `https://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getVilageFcst` +
        `?serviceKey=${SERVICE_KEY}&numOfRows=1000&pageNo=1&dataType=JSON` +
        `&base_date=${base_date}&base_time=${base_time}&nx=${nx}&ny=${ny}`;

    try {
        const res = await fetch(url);
        const data = await res.json();
        const items = data?.response?.body?.items?.item;

        if (!items?.length) {
            // ‚ö†Ô∏è Îç∞Ïù¥ÌÑ∞Í∞Ä ÎπÑÏñ¥ÏûàÏùÑ Í≤ΩÏö∞: Ìïú Î≤àÎßå Ïù¥Ï†Ñ Î∞úÌëúÏãúÍ∞ÅÏúºÎ°ú Ïû¨ÏãúÎèÑ
            if (!isRetry) {
                const prev = getPreviousBaseTime(base_date, base_time);
                return await fetchWeather(true, prev.date, prev.time);
            }
            throw new Error("no_data");
        }

        // ===== Ïò§Îäò ÎÇ†Ïî® =====
        const hhNow = String(kst.getHours()).padStart(2,"0") + "00";
        const todayList = items.filter(i => i.fcstDate === base_date);
        const nearest = todayList.find(i => i.fcstTime >= hhNow) || todayList[0];

        const sky = nearest?.category === "SKY" ? nearest.fcstValue :
                    todayList.find(i => i.category === "SKY")?.fcstValue;
        const pty = todayList.find(i => i.category === "PTY")?.fcstValue;
        const tmp = todayList.find(i => i.category === "TMP")?.fcstValue;
        const reh = todayList.find(i => i.category === "REH")?.fcstValue;

        document.getElementById("todayWeather").innerHTML =
            `${getWeatherIcon(sky, pty)} ${tmp ?? "-"}‚ÑÉ ¬∑ ${reh ?? "-"}%`;

        // ===== ÎÇ¥Ïùº (ÏµúÏ†Ä/ÏµúÍ≥† TMP) =====
        const tomorrowTemps = items
            .filter(i => i.fcstDate === tomorrow_date && i.category === "TMP")
            .map(i => Number(i.fcstValue));

        if (tomorrowTemps.length > 0) {
            const tmin = Math.min(...tomorrowTemps);
            const tmax = Math.max(...tomorrowTemps);
            document.getElementById("tomorrowWeather").textContent =
                `ÎÇ¥Ïùº ${tmin}‚ÑÉ / ${tmax}‚ÑÉ`;
        } else {
            document.getElementById("tomorrowWeather").textContent = "";
        }

    } catch {
        // ‚ùó ÏôÑÏ†Ñ Ïã§Ìå®Ìï¥ÎèÑ Ïò§Î•ò Î©îÏãúÏßÄ ÏóÜÏù¥ Ï°∞Ïö©Ìûà ÌëúÏãú Ïú†ÏßÄ
        document.getElementById("todayWeather").innerHTML = "-";
        document.getElementById("tomorrowWeather").textContent = "";
    }
}

// üîÅ ÏßÅÏ†Ñ Î∞úÌëúÏãúÍ∞Å Í≥ÑÏÇ∞ Î≥¥Ï°∞ Ìï®Ïàò
function getPreviousBaseTime(base_date, base_time) {
    const baseTimes = ["0200","0500","0800","1100","1400","1700","2000","2300"];
    const idx = baseTimes.indexOf(base_time);
    let date = base_date;
    let time = "2300";
    if (idx > 0) {
        time = baseTimes[idx - 1];
    } else {
        const d = new Date(
            `${base_date.slice(0,4)}-${base_date.slice(4,6)}-${base_date.slice(6,8)}T00:00:00`
        );
        d.setDate(d.getDate() - 1);
        date = `${d.getFullYear()}${String(d.getMonth()+1).padStart(2,"0")}${String(d.getDate()).padStart(2,"0")}`;
    }
    return { date, time };
}


// ÏïÑÏù¥ÏΩò Îß§Ìïë
function getWeatherIcon(sky, pty) {
    if (pty == 1) return '<i class="fa-solid fa-cloud-rain"></i>';          // ÎπÑ
    if (pty == 2) return '<i class="fa-solid fa-cloud-showers-heavy"></i>'; // ÎπÑ/Îàà
    if (pty == 3) return '<i class="fa-solid fa-snowflake"></i>';           // Îàà
    if (pty == 4) return '<i class="fa-solid fa-cloud-sun-rain"></i>';      // ÏÜåÎÇòÍ∏∞

    if (sky == 1) return '<i class="fa-solid fa-sun"></i>';                 // ÎßëÏùå
    if (sky == 3) return '<i class="fa-solid fa-cloud-sun"></i>';           // Íµ¨Î¶ÑÎßéÏùå
    if (sky == 4) return '<i class="fa-solid fa-cloud"></i>';               // ÌùêÎ¶º

    return '<i class="fa-solid fa-temperature-half"></i>'; // Í∏∞Î≥∏Í∞í
}

// Ïã§Ìñâ
fetchWeather();
setInterval(fetchWeather, 30 * 60 * 1000); // 30Î∂ÑÎßàÎã§ Í∞±Ïã†



// ===== Í∞úÏù∏Ìôî Ïπ¥Îìú =====
(function(){
    const STORAGE_KEY = "eduinfo.personalLinks";
    const container = document.getElementById("personalLinks");
    const addBtn = document.getElementById("addLinkBtn");
    const manageBtn = document.getElementById("manageLinkBtn");
    const deleteMode = document.getElementById("deleteMode");

    function getLinks() {
        return JSON.parse(localStorage.getItem(STORAGE_KEY) || "[]");
    }
    function saveLinks(links) {
        localStorage.setItem(STORAGE_KEY, JSON.stringify(links));
    }

    function renderLinks() {
        container.innerHTML = "";
        const links = getLinks();
        if (links.length === 0) {
        const emptyMsg = document.createElement("p");
        emptyMsg.textContent = "ÏïÑÏßÅ Ï∂îÍ∞ÄÌïú ÎßÅÌÅ¨Í∞Ä ÏóÜÏäµÎãàÎã§.";
        emptyMsg.style.color = "var(--muted)";
        emptyMsg.style.fontSize = "13px";
        container.appendChild(emptyMsg);
        return;
        }
        links.forEach(link => {
        const a = document.createElement("a");
        a.className = "btn";
        a.href = link.url;
        a.target = "_blank";
        a.rel = "noopener";
        a.textContent = link.name;
        container.appendChild(a);
        });
    }

    function addLink() {
        let name = prompt("ÎßÅÌÅ¨ Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî (ÏµúÎåÄ 10Ïûê):");
        if (!name) return;

        // üîí Í∏ÄÏûêÏàò Ï†úÌïú Ï†ÅÏö©
        name = name.trim().slice(0, 10);

        if (name.length === 0) {
            alert("Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî.");
            return;
        }

        const url = prompt("URLÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî (http:// ÎòêÎäî https:// Ìè¨Ìï®):");
        if (!url) return;

        const links = getLinks();
        links.push({ name, url });
        saveLinks(links);
        renderLinks();
    }

    function toggleDeleteMode() {
        if (deleteMode.style.display === "none") {
        // ÏÇ≠Ï†ú Î™®Îìú Ïó¥Í∏∞
        deleteMode.style.display = "block";
        deleteMode.innerHTML = "<p style='font-size:13px;color:var(--muted)'>ÏÇ≠Ï†úÌï† ÎßÅÌÅ¨Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî:</p>";
        const links = getLinks();
        links.forEach((link, i) => {
            const row = document.createElement("div");
            row.style.display = "flex";
            row.style.alignItems = "center";
            row.style.gap = "6px";
            row.style.marginBottom = "6px";

            const label = document.createElement("span");
            label.textContent = link.name;
            label.style.flex = "1";

            const delBtn = document.createElement("button");
            delBtn.className = "btn";
            delBtn.style.background = "#2a3a4f";
            delBtn.textContent = "‚ùå ÏÇ≠Ï†ú";
            delBtn.onclick = () => {
            links.splice(i, 1);
            saveLinks(links);
            renderLinks();
            toggleDeleteMode(); // Î¶¨Ïä§Ìä∏ Îã§Ïãú Í∞±Ïã†
            };

            row.appendChild(label);
            row.appendChild(delBtn);
            deleteMode.appendChild(row);
        });
        } else {
        // ÏÇ≠Ï†ú Î™®Îìú Îã´Í∏∞
        deleteMode.style.display = "none";
        deleteMode.innerHTML = "";
        }
    }

    addBtn.addEventListener("click", addLink);
    manageBtn.addEventListener("click", toggleDeleteMode);

    renderLinks();
})();

// ===== Í∞úÏù∏Ìôî ÏàúÏÑú =====
// Ï†ÄÏû•
function saveOrder() {
    const keys = [...document.querySelectorAll("#grid .card")]
        .map(c => c.dataset.key);
    localStorage.setItem("eduinfo.cardOrder", JSON.stringify(keys));
}

function loadOrder() {
    const order = JSON.parse(localStorage.getItem("eduinfo.cardOrder") || "[]");
    const grid = document.getElementById("grid");
    order.forEach(key => {
        const el = document.querySelector(`#grid .card[data-key="${key}"]`);
        if (el) grid.appendChild(el);
    });
}
// Ï¥àÍ∏∞ Ïã§Ìñâ
loadOrder();

// Sortable ÌôúÏÑ±Ìôî
let sortable = new Sortable(document.getElementById("grid"), {
    animation: 200,
    ghostClass: "ghost",
    chosenClass: "chosen",
    delay: 150,             // 150ms Ïù¥ÏÉÅ ÎàåÎü¨Ïïº ÎìúÎûòÍ∑∏ ÏãúÏûë
    delayOnTouchOnly: true, // Î™®Î∞îÏùº ÌÑ∞ÏπòÏóêÏÑúÎßå ÏßÄÏó∞ Ï†ÅÏö©
    onEnd: saveOrder
});

function toggleLock() {
    let isLocked = localStorage.getItem("eduinfo.locked") === "true"; // Ï†ÄÏû•Îêú Í∞í Î∂àÎü¨Ïò§Í∏∞
    isLocked = !isLocked; // Î∞òÏ†Ñ
    sortable.option("disabled", isLocked); // Ïû†Í∏à/Ìï¥Ï†ú Ï†ÅÏö©
    localStorage.setItem("eduinfo.locked", isLocked); // ÏÉÅÌÉú Ï†ÄÏû•
    document.getElementById("lockBtn").textContent = isLocked ? "üîí Ïπ¥Îìú Í≥†Ï†ï" : "üîì Ïπ¥Îìú Ìï¥Ï†ú";
}

// Ï¥àÍ∏∞ ÏÉÅÌÉú Î°úÎìú
(function () {
    let isLocked = localStorage.getItem("eduinfo.locked") === "true";
    sortable.option("disabled", isLocked);
    document.getElementById("lockBtn").textContent = isLocked ? "üîí Ïπ¥Îìú Í≥†Ï†ï" : "üîì Ïπ¥Îìú Ìï¥Ï†ú";
})();

// ÎèÑÏõÄÎßê Î™®Îã¨ Ïó¥Í∏∞/Îã´Í∏∞
const helpBtn = document.getElementById("helpBtn");
const helpModal = document.getElementById("helpModal");
const closeHelp = document.getElementById("closeHelp");

const dutyBtn = document.getElementById("dutyBtn");
const dutyModal = document.getElementById("dutyModal");
const closeDutyBtn = document.getElementById("closeDutyBtn");

const memoModal = document.getElementById("memoModal");


dutyBtn.addEventListener("click", () => {
    dutyModal.style.display = "flex";
});

closeDutyBtn.addEventListener("click", () => {
    dutyModal.style.display = "none";
});
closeDuty.addEventListener("click", () => {
    dutyModal.style.display = "none";
})

helpBtn.addEventListener("click", () => {
    helpModal.style.display = "block";
});

closeHelp.addEventListener("click", () => {
    helpModal.style.display = "none";
});

window.addEventListener("click", (e) => {
    if (e.target === helpModal || e.target === dutyModal || e.target === memoModal) {
        helpModal.style.display = "none";
        dutyModal.style.display = "none";
        memoModal.style.display = "none";
    }
});

async function loadDuty() {
    const url = "https://docs.google.com/spreadsheets/d/e/2PACX-1vR3jc-6ORNFCO2KGxiAJdvZ87JLAyTDgOxEEd2atN4q38jWjGAdBbT4q1LaIMnz2q68-8K9i1JR0yNs/pub?gid=0&single=true&output=csv";
    const res = await fetch(url);
    const text = await res.text();
    const rows = text.trim().split("\n").map(r => r.split(","));

    // Ïò§Îäò Îç∞Ïù¥ÌÑ∞ ------------------
    let today = rows[0][0];
    let jubun = rows[3][0];
    let gyotong = rows[7][0];
    let jubunGyotong = (jubun === gyotong) ? jubun : `${jubun}, ${gyotong}`;
    let gupsikA = [rows[3][3], rows[4][3]].filter(v => v).join(", ");
    let gupsikB = [rows[7][3], rows[8][3]].filter(v => v).join(", ");
    let yaja = [rows[3][6], rows[4][6]].filter(v => v).join(", ");

    // ÎÇ¥Ïùº Îç∞Ïù¥ÌÑ∞ ------------------
    let tomorrow = rows[11][0];
    let jubun2 = rows[14][0];
    let gyotong2 = rows[18][0];
    let jubunGyotong2 = (jubun2 === gyotong2) ? jubun2 : `${jubun2}, ${gyotong2}`;
    let gupsikA2 = [rows[14][3], rows[15][3]].filter(v => v).join(", ");
    let gupsikB2 = [rows[18][3], rows[19][3]].filter(v => v).join(", ");
    let yaja2 = [rows[14][6], rows[15][6]].filter(v => v).join(", ");

    // ‚úÖ Ìëú Íµ¨Ï°∞Î°ú HTML ÏÉùÏÑ±
    let html = `
    <table class="duty-table">
        <thead>
        <tr>
            <th></th>
            <th>${today}</th>
            <th>${tomorrow}</th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <td>Ï£ºÎ≤à/ÍµêÌÜµ</td>
            <td>${jubunGyotong}</td>
            <td>${jubunGyotong2}</td>
        </tr>
        <tr>
            <td>Í∏âÏãùA</td>
            <td>${gupsikA}</td>
            <td>${gupsikA2}</td>
        </tr>
        <tr>
            <td>Í∏âÏãùB</td>
            <td>${gupsikB}</td>
            <td>${gupsikB2}</td>
        </tr>
        <tr>
            <td>ÏïºÏûê[ÎãπÏßÅ]</td>
            <td>${yaja}</td>
            <td>${yaja2}</td>
        </tr>
        </tbody>
    </table>
    `;

    document.getElementById("modal-duty").innerHTML = html;
}
loadDuty();

const scheduleBtn = document.getElementById("scheduleBtn");
const scheduleModal = document.getElementById("scheduleModal");
const closeSchedule = document.getElementById("closeSchedule");
const closeScheduleBtn = document.getElementById("closeScheduleBtn");

// Ïò§ÎäòÏùºÏ†ï Î≤ÑÌäº ÌÅ¥Î¶≠ ‚Üí Î™®Îã¨ Ïó¥Í∏∞
scheduleBtn.addEventListener("click", () => {
  scheduleModal.style.display = "flex";
  loadSchedule(); // Îç∞Ïù¥ÌÑ∞ Î°úÎìú
});

// Îã´Í∏∞ Î≤ÑÌäº
closeSchedule.addEventListener("click", () => {
  scheduleModal.style.display = "none";
});
closeScheduleBtn.addEventListener("click", () => {
  scheduleModal.style.display = "none";
});

async function loadSchedule() {
  // ‚úÖ Ïò§ÎäòÏùºÏ†ï ÏãúÌä∏Ïùò CSV Ï£ºÏÜå
  const url = "https://docs.google.com/spreadsheets/d/e/2PACX-1vSVGElXniOyF3A9SaK2l_8Zm6omPzbialdK8pCdeI5QuEiRXcOMC8ylwNHFI8coP8rfvykhcVwC08pe/pub?gid=0&single=true&output=csv";

  try {
    const res = await fetch(url);
    let text = await res.text();

    // üîπ CSV Ï†ÑÏ≤òÎ¶¨ (BOM, Îî∞Ïò¥Ìëú, Î∂àÌïÑÏöîÌïú Î¨∏Ïûê Ï†úÍ±∞)
    text = text
      .replace(/^\uFEFF/, "")      // BOM Ï†úÍ±∞
      .replace(/^"+|"+$/g, "")     // Îß® Ïïû/Îí§ ÌÅ∞Îî∞Ïò¥Ìëú Ï†úÍ±∞
      .replace(/""+/g, '"')        // Ï§ëÎ≥µ Îî∞Ïò¥Ìëú Ï†ïÎ¶¨
      .replace(/\r/g, "")          // Ï∫êÎ¶¨ÏßÄÎ¶¨ÌÑ¥ Ï†úÍ±∞
      .trim();

    // üîπ Ï§Ñ Îã®ÏúÑ Î∂ÑÎ¶¨
    const lines = text.split("\n");
    const title = lines[0]?.trim() || "Ïò§ÎäòÏùò ÏùºÏ†ï";
    const desc = lines.slice(1).join("\n").trim();

    // ‚úÖ [Î∂ÄÏÑú] Îã®ÏúÑÎ°ú Íµ¨Í∞Ñ Î¨∂Í∏∞
    const blocks = [];
    let currentDept = null;
    let currentContent = [];

    const allLines = desc.split("\n");
    for (let line of allLines) {
      // üî∏ Ï≤´ Ï§Ñ ÌäπÏàòÎ¨∏Ïûê/BOM/Îî∞Ïò¥Ìëú Ï†úÍ±∞
      line = line.replace(/^[\uFEFF"']+/, "").trim();

      const deptMatch = line.match(/^\[([^\]]+)\]\s*(.*)/);
      if (deptMatch) {
        // ÏÉàÎ°úÏö¥ [Î∂ÄÏÑú] Îì±Ïû• Ïãú Ïù¥Ï†Ñ Î∏îÎ°ù Ï†ÄÏû•
        if (currentDept) {
          blocks.push({
            dept: currentDept,
            content: currentContent.join("<br>")
          });
        }
        currentDept = deptMatch[1];
        currentContent = [deptMatch[2]];
      } else if (currentDept) {
        // Î∂ÄÏÑú Íµ¨Í∞Ñ ÎÇ¥Î∂ÄÏùò Ï∂îÍ∞Ä Ï§Ñ
        currentContent.push(line);
      }
    }

    // ÎßàÏßÄÎßâ Î∏îÎ°ù Ï†ÄÏû•
    if (currentDept) {
      blocks.push({
        dept: currentDept,
        content: currentContent.join("<br>")
      });
    }

    // ‚úÖ HTML Î≥ÄÌôò (CSS Í∏∞Î∞ò)
    const formattedDesc = blocks
      .map(
        b => `
        <div class="schedule-item">
          <strong class="schedule-dept">[${b.dept}]</strong><br>
          <div class="schedule-content">${b.content}</div>
        </div>`
      )
      .join("");

    // ‚úÖ Î™®Îã¨ HTML Íµ¨ÏÑ±
    const html = `
      <table class="duty-table schedule-table">
        <tbody>
          <tr>
            <td class="schedule-wrapper">${formattedDesc}</td>
          </tr>
        </tbody>
      </table>
    `;

    document.getElementById("modal-schedule").innerHTML = html;
  } catch (e) {
    console.error("Ïò§ÎäòÏùºÏ†ï Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:", e);
    document.getElementById("modal-schedule").innerHTML =
      "<p style='color:var(--warning);text-align:center;'>Î∂àÎü¨Ïò§Í∏∞Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.</p>";
  }
}

scheduleBtn.addEventListener("click", () => {
  scheduleModal.style.display = "flex";
  loadSchedule(); // ÌÅ¥Î¶≠ Ïãú ÏµúÏã† Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞
});

closeScheduleBtn.addEventListener("click", () => {
  scheduleModal.style.display = "none";
});

// Î∞∞Í≤Ω ÌÅ¥Î¶≠ Ïãú Îã´Í∏∞
window.addEventListener("click", (e) => {
  if (e.target === scheduleModal) {
    scheduleModal.style.display = "none";
  }
});

// // Î©îÎ™® Ïπ¥Îìú
// const memoArea = document.getElementById("memoArea");

// // Ï†ÄÏû•Îêú Î©îÎ™® Î∂àÎü¨Ïò§Í∏∞
// memoArea.value = localStorage.getItem("eduinfo.memo") || "";

// // ÏûÖÎ†•Ìï† ÎïåÎßàÎã§ Ï†ÄÏû•
// memoArea.addEventListener("input", () => {
//     localStorage.setItem("eduinfo.memo", memoArea.value);
// });

const MEMO_KEY = "eduinfo.memoCard";
let memos = JSON.parse(localStorage.getItem(MEMO_KEY) || "[]");
let editingIndex = null; // ÌòÑÏû¨ ÏàòÏ†ï Ï§ëÏù∏ Î©îÎ™® Ïù∏Îç±Ïä§

const memoListEl = document.getElementById("memoList");
const addMemoBtn = document.getElementById("addMemoBtn");

const modal = document.getElementById("memoModal");
const closeModal = document.getElementById("closeMemoModal");
const saveMemoBtn = document.getElementById("saveMemoBtn");
const memoTitleInput = document.getElementById("memoTitle");
const memoContentInput = document.getElementById("memoContent");

// Î†åÎçîÎßÅ
function renderMemos() {
  memoListEl.innerHTML = "";
  memos.forEach((memo, idx) => {
    const btn = document.createElement("button");
    btn.className = "btn";
    btn.textContent = memo.title;
    btn.onclick = () => openModal(idx); // ÌÅ¥Î¶≠ÌïòÎ©¥ ÏàòÏ†ï Î™®Îìú
    memoListEl.appendChild(btn);
  });
}
renderMemos();

// Î™®Îã¨ Ïó¥Í∏∞ (ÏÉà Î©îÎ™® or ÏàòÏ†ï)
function openModal(index = null) {
  editingIndex = index;
  if (index === null) {
    // ÏÉà Î©îÎ™®
    memoTitleInput.value = "";
    memoContentInput.value = "";
  } else {
    // Í∏∞Ï°¥ Î©îÎ™® ÏàòÏ†ï
    memoTitleInput.value = memos[index].title;
    memoContentInput.value = memos[index].content;
  }
  modal.style.display = "flex";
}

// Î™®Îã¨ Îã´Í∏∞
// closeModal.onclick = () => {
//   modal.style.display = "none";
//   editingIndex = null;
// };

window.addEventListener("click", (e) => {
    if (e.target === closeModal) {
        modal.style.display = "none";
        editingIndex = null;
    }
});



// Ï†ÄÏû•
saveMemoBtn.onclick = () => {
  const title = memoTitleInput.value.trim();
  const content = memoContentInput.value.trim();
  if (!title || !content) {
    alert("Ï†úÎ™©Í≥º ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî.");
    return;
  }

  if (editingIndex === null) {
    if (memos.length >= 5) {
      alert("Î©îÎ™®Îäî ÏµúÎåÄ 5Í∞úÍπåÏßÄÎßå Ï†ÄÏû•Ìï† Ïàò ÏûàÏäµÎãàÎã§.");
      return;
    }
    memos.push({ title, content });
  } else {
    memos[editingIndex] = { title, content };
  }

  localStorage.setItem(MEMO_KEY, JSON.stringify(memos));
  renderMemos();
  modal.style.display = "none";
  editingIndex = null;
};

// Ï∂îÍ∞Ä Î≤ÑÌäº
addMemoBtn.onclick = () => openModal(null);

const deleteMemoBtn = document.getElementById("deleteMemoBtn");

// Î™®Îã¨ Ïó¥Í∏∞ (ÏÉà Î©îÎ™® or ÏàòÏ†ï)
function openModal(index = null) {
  editingIndex = index;
  if (index === null) {
    // ÏÉà Î©îÎ™®
    memoTitleInput.value = "";
    memoContentInput.value = "";
    deleteMemoBtn.style.display = "none"; // ÏÉà Î©îÎ™®Ïùº Îïê ÏÇ≠Ï†ú Ïà®ÍπÄ
  } else {
    // Í∏∞Ï°¥ Î©îÎ™® ÏàòÏ†ï
    memoTitleInput.value = memos[index].title;
    memoContentInput.value = memos[index].content;
    saveMemoBtn.textContent = "ÏàòÏ†ï"; 
    deleteMemoBtn.style.display = "inline-block"; // ÏàòÏ†ï Î™®ÎìúÏùº Îïê ÏÇ≠Ï†ú Î≥¥Ïù¥Í∏∞
  }
  modal.style.display = "flex";
}

// ÏÇ≠Ï†ú Î≤ÑÌäº ÌÅ¥Î¶≠
deleteMemoBtn.onclick = () => {
  if (editingIndex !== null) {
    if (confirm("Ïù¥ Î©îÎ™®Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?")) {
      memos.splice(editingIndex, 1); // Ìï¥Îãπ Ïù∏Îç±Ïä§ ÏÇ≠Ï†ú
      localStorage.setItem(MEMO_KEY, JSON.stringify(memos));
      renderMemos();
      modal.style.display = "none";
      editingIndex = null;
    }
  }
};


// Ïπ¥Îìú Ïà®ÍπÄ Î∞è Î≥µÏõê Í∏∞Îä•
// Ïπ¥Îìú key ‚Üí Ï†úÎ™© Îß§Ìïë
function buildCardMap() {
  const map = {};
  document.querySelectorAll("#grid .card").forEach(c => {
    const key = c.dataset.key;
    const title = c.querySelector("h3")?.textContent.trim() || "Ï†úÎ™© ÏóÜÏùå";
    map[key] = title;
  });
  return map;
}

// let hiddenCards = JSON.parse(localStorage.getItem("eduinfo.hiddenCards") || "[]");

function hideCard(key) {
  const card = document.querySelector(`#grid .card[data-key="${key}"]`);
  if (!card) return;
  card.style.display = "none";

  if (!hiddenCards.includes(key)) {
    hiddenCards.push(key);
    localStorage.setItem("eduinfo.hiddenCards", JSON.stringify(hiddenCards));
  }
  renderHiddenList();
}

function showCard(key) {
  const card = document.querySelector(`#grid .card[data-key="${key}"]`);
  if (!card) return;
  card.style.display = "";

  hiddenCards = hiddenCards.filter(k => k !== key);
  localStorage.setItem("eduinfo.hiddenCards", JSON.stringify(hiddenCards));
  renderHiddenList();
}

function renderHiddenList() {
  const container = document.getElementById("hiddenList");
  container.innerHTML = "";

  const cardMap = buildCardMap();

  if (hiddenCards.length === 0) {
    container.textContent = "Ïà®Í∏¥ Ïπ¥Îìú ÏóÜÏùå";
    return;
  }

  hiddenCards.forEach(key => {
    const btn = document.createElement("button");
    btn.textContent = `Î≥µÏõê: ${cardMap[key] || key}`;
    btn.onclick = () => showCard(key);
    container.appendChild(btn);
  });
}


// Ïà®ÍπÄ Ïπ¥Îìú Î™©Î°ù ÌÜ†Í∏Ä
document.getElementById("hiddenListBtn").addEventListener("click", () => {
  const list = document.getElementById("hiddenList");
  list.style.display = (list.style.display === "block") ? "none" : "block";
});

// Ï¥àÍ∏∞ Î°úÎî© Ïãú Ïà®ÍπÄ Ï†ÅÏö©
window.addEventListener("DOMContentLoaded", () => {
  const hidden = JSON.parse(localStorage.getItem("eduinfo.hiddenCards") || "[]");
  hidden.forEach(key => {
    const el = document.querySelector(`.card[data-key="${key}"]`);
    if (el) el.style.display = "none";
  });
  renderHiddenList();
});
